//=----------------------------------------------------------------------------=
// This source file is part of the Ultimathnum open source project.
//
// Copyright (c)  2023 Oscar Bystr√∂m Ericsson
// Licensed under Apache License, Version 2.0
//
// See http://www.apache.org/licenses/LICENSE-2.0 for license information.
//=----------------------------------------------------------------------------=

import CoreKit
import InfiniIntKit
import TestKit

//*============================================================================*
// MARK: * Infini Int x Factorial
//*============================================================================*

final class InfiniIntTestsOnFactorial: XCTestCase {
    
    //=------------------------------------------------------------------------=
    // MARK: Tests
    //=------------------------------------------------------------------------=
    
    /// - Seealso: https://www.wolframalpha.com/input?i=1337%21
    func testElementAtIndex1337() {
        let index = I32(1337)
        let expectation = UXL("""
        0000000000000000000000000000000000000000000000088746638366576796\
        1662410646418133009547720120993472817948825961826558347208242245\
        1756532829820227220586694812398717056396577963484185843624972811\
        5666957529675078095475832753552497225147925032072561058716604731\
        6052852866030929583178433027418481048030909480696419787417341906\
        4572030730827369138507112563270949558364041355124827802950693106\
        8269157399549150062385457960158781784950362878981114976656707404\
        5228982210153765358361566631588607877546386029998012175018958929\
        3582268308469269104282190071516000938218917563445346261044245950\
        1188171227111263255419825853726532340116198945685498762638201684\
        1485520206291409251317581091038442775621830936404993634843379290\
        1361100509611552684596678558211306866991110527104484564523037155\
        6478471360899164682373688208253571354777727508512242286955149145\
        8340859781864591504272223365288587594617674139500396689715172922\
        6359392578147064352610223393483998956246879837841320985989769626\
        6179205512520481820737999482598193449891304475697988001622701191\
        9060243351342003850059552276235127922399190788983464032761842853\
        7779125657988384921093162403329422846750070080790435980548011320\
        8012589893605733000032695906552073425564369371069248760095607207\
        8505707260781540866742465477586689361471938191739558464749996286\
        4413771116506778459499623367780957390738229935737419898775801368\
        3016897266615653111897811764005836445828334070894094916416321421\
        2205585345343467103936615504309510942658940054307206713898430351\
        2765763757406092393826588587336838931053010025291844821518220368\
        6997921561397076063950777833351117947017284810049693597206497166\
        1937839645155149990343920418359376780238516182208337827385812062\
        7637322394117182921334148019921300324968502074248850527953855369\
        2799334077418352464827518766413942962156425866660113699769089339\
        4377729608513211320512270149552612669389229439481776767545946390\
        2878893912569300830451490352289724636463392114204127798336363985\
        5771698195723868490914292685644330145722348682172596462099682883\
        3653018978436973049396466355275048510896815912978257797414563383\
        5207973366697117157148942636872087371642483893143517378758644998\
        8464426436536631157600211369872325447977414398436560514078798743\
        9413601308015052341997692402113801272966233644030244020754954191\
        9066259118723591507750735712313844602304884313145508736481447704\
        5488678431392483647586712465074591137549320739633574910014760488\
        6064560970902257373275335399229457426300052890490827954589255639\
        1315465642093856120179282119393738619979280502407518321372860305\
        8326104665419968327865042354199849986547736943151560629608102053\
        3403211545135539930030125186619333002398441459913859932886526049\
        7338780659327709932009885060564610355341365548766608829381808144\
        5944746250847506805559294814927409883522217663983575214011913266\
        1690451806244719475225312994508695604018925535701812269958861020\
        0682687421950641658953426083582402430628845526662341581578829689\
        9891354397168436987776237040575004903091492072939590734941921683\
        0563653773210805203036149159257276532887915564922718621996437779\
        0769672632868865437856170600479629204015063722948541356859602014\
        6350750607517433577548376487027468181942593305623356616611128614\
        7971012005610019299941678022428072587797937576139070865042268513\
        6783106507900865379664560961392968153883432982179193291897376909\
        0276043156634245302730352969198703152215639130636288000000000000\
        0000000000000000000000000000000000000000000000000000000000000000\
        0000000000000000000000000000000000000000000000000000000000000000\
        0000000000000000000000000000000000000000000000000000000000000000\
        0000000000000000000000000000000000000000000000000000000000000000\
        0000000000000000000000000000000000000000000000000000000000000000
        """)!
        
        func whereIs<T>(_ type: T.Type) where T: ArbitraryInteger {
            Test().comparison(T(index).factorial()!, expectation, Signum.zero)
        }
        
        whereIs(IXL.self)
        whereIs(UXL.self)
        #if !DEBUG
        whereIs(InfiniInt<I8>.self)
        whereIs(InfiniInt<U8>.self)
        #endif
    }
}
